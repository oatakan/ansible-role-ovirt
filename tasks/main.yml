---
- name: obtain SSO token with using username/password credentials
  ovirt_auth:
    url: "{{ lookup('env', 'OVIRT_URL')|default(ovirt.url) }}"
    username: "{{ lookup('env', 'OVIRT_USERNAME')|default(ovirt.username) }}"
    password: "{{ lookup('env', 'OVIRT_PASSWORD')|default(ovirt.password) }}"
    insecure: yes

- name: linux - clone template and customize
  ovirt_vms:
    auth: "{{ ovirt_auth }}"
    name: "{{ item.name }}"
    template: "{{ item.template }}"
    cluster: "{{ providers.ovirt.cluster | default('Default') }}"
    state: running
    wait: yes
    memory: "{{ item.memory }}MiB"
    cpu_sockets: "{{ item.cpu }}"
    type: "{{ item.type | default('server') }}"
    high_availability: true
    nics:
      - name: nic1
        profile_name: "{{ item.networks[0].name }}"
        network: "{{ item.networks[0].name }}"
    cloud_init:
      nic_boot_protocol: static
      nic_ip_address: "{{ item.networks[0].ip | default('') }}"
      nic_netmask: "{{ item.networks[0].netmask | default('') }}"
      nic_gateway: "{{ item.networks[0].gateway | default('') }}"
      nic_name: eth0
      nic_on_boot: true
      host_name: "{{ item.name }}.{{ item.domain | default('') }}"
      dns_servers: "{{ item.dns_servers|join(' ') | default([]) }}"
      user_name: "{{ item.user_name | default('') }}"
      root_password: "{{ item.root_password | default('') }}"
  async: 7200
  poll: 0
  register: deploy_linux
  with_items: "{{ nodes }}"
  when: nodes is defined and item.sysprep is not defined

- name: windows - clone template and customize
  ovirt_vms:
    auth: "{{ ovirt_auth }}"
    name: "{{ item.name }}"
    template: "{{ item.template }}"
    cluster: "{{ providers.ovirt.cluster | default('Default') }}"
    state: running
    wait: yes
    memory: "{{ item.memory }}MiB"
    cpu_sockets: "{{ item.cpu }}"
    type: "{{ item.type | default('server') }}"
    high_availability: true
    nics:
      - name: nic1
        profile_name: "{{ item.networks[0].name }}"
        network: "{{ item.networks[0].name }}"
    sysprep:
      custom_script: "{{ lookup('template', 'templates/unattended.xml.j2') }}"
      host_name: "{{ item.name | default('') }}"
      domain: "{{ item.domain | default('') }}"
      user_name: "{{ item.user_name | default(ansible_user) }}"
      root_password: "{{ item.root_password | default(ansible_password) }}"
  async: 7200
  poll: 0
  register: deploy_windows
  with_items: "{{ nodes }}"
  when: nodes is defined and item.sysprep is defined

- name: combine deployment results
  set_fact:
    deploy_results: "{{ deploy_results|default([]) + [ item ] }}"
  with_items:
    - "{{ deploy_linux.results }}"
    - "{{ deploy_windows.results }}"
  when: nodes is defined and item.ansible_job_id is defined

- name: wait for instance creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: instances
  until: instances.finished
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10
  with_items: "{{ deploy_results }}"
  when:
    - nodes is defined and deploy_results is defined
    - item.ansible_job_id is defined

- name: create additional disks
  ovirt_disks:
    auth: "{{ ovirt_auth }}"
    name: "{{ item.0.name }}-{{ item.1.name }}"
    vm_name: "{{ item.0.name }}"
    size: "{{ item.1.size }}"
    format: "{{ item.1.format }}"
    interface: "{{ item.1.interface }}"
    bootable: "{{ item.1.bootable }}"
    storage_domain: "{{ item.1.storage_domain }}"
    state: present
    wait: yes
  async: 7200
  poll: 0
  register: create_disks
  with_subelements:
    - "{{ nodes }}"
    - disks
    - skip_missing: yes
  when: nodes is defined and item.1 is defined

- name: wait for disk creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: disks_creation
  until: disks_creation.finished == 0
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10
  with_items: "{{ create_disks.results }}"
  when:
    - nodes is defined and create_disks.results is defined
    - item.ansible_job_id is defined

- name: waiting for ip address to be assigned
  ovirt_nics_facts:
    auth: "{{ ovirt_auth }}"
    vm: "{{ item.vm.name }}"
    name: nic1
  register: nics
  until:
    - nics.ansible_facts.ovirt_nics | length > 0
    - nics.ansible_facts.ovirt_nics[0].reported_devices | length > 0
    - nics.ansible_facts.ovirt_nics[0].reported_devices[0].ips | length > 0
    - nics.ansible_facts.ovirt_nics[0].reported_devices[0].ips[0].address is defined
    - nics.ansible_facts.ovirt_nics[0].reported_devices[0].ips[0].version == 'v4'
  retries: 300
  delay: 10
  with_items: "{{ instances.results }}"
  when:
    - nodes is defined and instances.results is defined
    - item.vm is defined

- name: waiting for servers to come online on predefined ip
  wait_for:
    host: "{{ item.networks[0].ip }}"
    port: "{{ item.ansible_port | default(ansible_port) | default('22') }}"
  with_items: "{{ nodes }}"
  when:
    - nodes is defined and item.networks is defined
    - item.networks[0].ip is defined

- name: waiting for servers to come online on dhcp ip
  wait_for:
    host: "{{ item.ansible_facts.ovirt_nics[0].reported_devices[0].ips[0].address }}"
    port: "{{ item.ansible_port | default(ansible_port) | default('22') }}"
  with_items: "{{ nics.results }}"
  when:
    - nodes is defined and nics.results is defined
    - item.ansible_facts is defined
    - item.item.item.item.networks is defined
    - item.item.item.item.networks[0].ip is not defined

- name: waiting for ovirt to show the predefined ip
  ovirt_nics_facts:
    auth: "{{ ovirt_auth }}"
    vm: "{{ item.name }}"
    name: nic1
  register: nics
  until:
    - nics.ansible_facts.ovirt_nics | length > 0
    - nics.ansible_facts.ovirt_nics[0].reported_devices | length > 0
    - nics.ansible_facts.ovirt_nics[0].reported_devices[0].ips | length > 0
    - nics.ansible_facts.ovirt_nics[0].reported_devices[0].ips[0].address is defined
    - nics.ansible_facts.ovirt_nics[0].reported_devices[0].ips[0].version == 'v4'
    - nics.ansible_facts.ovirt_nics[0].reported_devices[0].ips[0].address == item.networks[0].ip
  retries: 300
  delay: 10
  with_items: "{{ nodes }}"
  when:
    - wait_for_static_ip_assigned
    - nodes is defined
    - item.networks | length > 0
    - item.networks[0].ip is defined