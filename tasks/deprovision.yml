---
- name: obtain SSO token with using username/password credentials
  ovirt_auth:
    url: "{{ lookup('env', 'OVIRT_URL')|default(ovirt.url) }}"
    username: "{{ lookup('env', 'OVIRT_USERNAME')|default(ovirt.username) }}"
    password: "{{ lookup('env', 'OVIRT_PASSWORD')|default(ovirt.password) }}"
    insecure: yes

- name: remove vms
  ovirt_vm:
    auth: "{{ ovirt_auth }}"
    name: "{{ item.name }}"
    template: "{{ item.template }}"
    cluster: "{{ providers.ovirt.cluster | default('Default') }}"
    state: absent
    wait: yes
  async: 7200
  poll: 0
  register: undeploy
  with_items: "{{ nodes }}"
  when: nodes is defined

- name: wait for instance deletion to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: instances
  until: instances.finished
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10
  with_items: "{{ undeploy.results }}"
  when:
    - nodes is defined
    - undeploy.results is defined
    - item.ansible_job_id is defined

- name: delete additional disks
  ovirt_disk:
    auth: "{{ ovirt_auth }}"
    name: "{{ item.0.name }}-{{ item.1.name }}"
    vm_name: "{{ item.0.name }}"
    storage_domain: "{{ item.1.storage_domain | default(omit) }}"
    state: absent
    wait: yes
  async: 7200
  poll: 0
  register: delete_disks
  with_subelements:
    - "{{ nodes }}"
    - disks
    - skip_missing: yes
  when:
    - nodes is defined
    - item.1 is defined

- name: wait for disk deletion to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: disks_deletion
  until: disks_deletion.finished == 0
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10
  with_items: "{{ delete_disks.results }}"
  when:
    - nodes is defined
    - delete_disks.results is defined
    - item.ansible_job_id is defined
    - disks_deletion is defined
    - disks_deletion.finished is defined