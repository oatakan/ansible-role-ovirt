---

- include_tasks: vm_info.yml

- name: remove vms
  ovirt.ovirt.ovirt_vm:
    auth: "{{ ovirt_auth }}"
    name: "{{ item }}"
    cluster: "{{ providers.ovirt.cluster | default('Default') }}"
    storage_domain: "{{ item.storage_domain | default(omit) }}"
    state: absent
    wait: true
  async: 7200
  poll: 0
  register: undeploy
  loop: "{{ ansible_play_hosts | intersect(nodes | map(attribute='name') | list) }}"
  when:
    - nodes is defined
    - hostvars[item].name is defined

- name: wait for vms to be deleted
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: vm_remove
  until: vm_remove.finished
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10
  loop: "{{ undeploy.results }}"
  when:
    - nodes is defined
    - undeploy.results is defined
    - item.ansible_job_id is defined

- name: delete any additional disks
  ovirt.ovirt.ovirt_disk:
    auth: "{{ ovirt_auth }}"
    id: "{{ _disk_id }}"
    state: absent
    wait: false
  async: 7200
  poll: 0
  register: delete_disks
  loop: "{{ q('subelements', _vm_info_combined, 'ovirt_vm.disk_attachments', {'skip_missing': True}) }}"
  when: not (_bootable | bool)
  vars:
    _disk_id: "{{ item.1.id }}"
    _bootable: "{{ item.1.bootable }}"

- name: wait for disk deletion to complete
  ansible.builtin.async_status:
    jid: "{{ item.ansible_job_id }}"
  register: disks_deletion
  until: disks_deletion.finished
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10
  loop: "{{ delete_disks.results }}"
  failed_when:
  when:
    - nodes is defined
    - delete_disks.results is defined
    - item.ansible_job_id is defined
  ignore_errors: true
