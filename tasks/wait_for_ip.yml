---

- name: waiting for ip address to be assigned
  ovirt.ovirt.ovirt_nic_info:
    auth: "{{ ovirt_auth }}"
    vm: "{{ item.vm.name }}"
    name: nic1
    follow:
      - reported_devices
  register: nics
  until:
    - nics.ovirt_nics | length > 0
    - nics.ovirt_nics[0].reported_devices | length > 0
    - reported_ipv4_addresses | length
    - not (reported_ipv4_addresses[0] | regex_search('^169\.254\..*'))
  retries: 300
  delay: 10
  loop: "{{ instances.results }}"
  when:
    - nodes is defined
    - instances.results is defined
    - item.vm is defined
  vars:
    reported_ipv4_addresses: "{{ (nics.ovirt_nics[0].reported_devices | json_query('[*].ips[?version==`v4`].address') | flatten) | default([]) }}"

- name: waiting for servers to come online on predefined ip
  ansible.builtin.wait_for:
    host: "{{ node.networks[0].ip }}"
    port: "{{ node.ansible_port | default(_ansible_port) | default('22') }}"
    timeout: "{{ wait_for_ip_timeout }}"
  loop: "{{ nodes }}"
  loop_control:
    loop_var: node
  when:
    - nodes is defined
    - node.networks is defined
    - node.networks[0].ip is defined

- name: waiting for servers to come online on dhcp ip
  ansible.builtin.wait_for:
    host: "{{ (item.ovirt_nics[0].reported_devices | json_query('[*].ips[?version==`v4`].address'))[0][0] | default('') }}"
    port: "{{ node.ansible_port | default(_ansible_port) | default('22') }}"
    timeout: "{{ wait_for_ip_timeout }}"
  loop: "{{ nics.results }}"
  loop_control:
    loop_var: nic
  vars:
    node: "{{ nic.item.item.item }}"
  when:
    - nodes is defined
    - nics.results is defined
    - nic.ovirt_nics is defined
    - node.networks is defined
    - node.networks[0].ip is not defined

- name: waiting for ovirt to show the predefined ip
  ovirt.ovirt.ovirt_nic_info:
    auth: "{{ ovirt_auth }}"
    vm: "{{ item.name }}"
    name: nic1
    follow:
      - reported_devices
  register: nics
  until:
    - nics.ovirt_nics | length > 0
    - nics.ovirt_nics[0].reported_devices | length > 0
    - item.networks[0].ip in reported_ipv4_addresses
  retries: "{{ ip_wait_retry_limit }}"
  delay: 10
  loop: "{{ nodes }}"
  when:
    - wait_for_static_ip_assigned|bool
    - nodes is defined
    - item.networks | length > 0
    - item.networks[0].ip is defined
  vars:
    reported_ipv4_addresses: "{{ (nics.ovirt_nics[0].reported_devices | json_query('[*].ips[?version==`v4`].address') | flatten) | default([]) }}"
